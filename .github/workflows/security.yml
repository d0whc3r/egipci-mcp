name: Security & Dependencies

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: pnpm audit --json > audit-results.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.run_id }}
          path: audit-results.json
          retention-days: 30

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check if CodeQL is enabled
        id: codeql-check
        run: |
          # Check if code scanning is enabled by trying to access the API
          if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts" \
             | grep -q "Code scanning is not enabled"; then
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "⚠️ Code scanning is not enabled for this repository"
          else
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "✅ Code scanning is enabled"
          fi

      - name: Initialize CodeQL
        if: steps.codeql-check.outputs.enabled == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup

      - name: Build for analysis
        run: pnpm run build

      - name: Perform CodeQL Analysis (with upload)
        if: steps.codeql-check.outputs.enabled == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:typescript'

      - name: Perform CodeQL Analysis (local only)
        if: steps.codeql-check.outputs.enabled == 'false'
        run: |
          echo "🔍 Running local security analysis..."

          # Run basic security checks
          echo "Checking for common security patterns..."

          # Check for hardcoded secrets
          if grep -r -i "password\|secret\|key\|token" src/ --include="*.ts" --include="*.js" | grep -v "// " | grep -v "test"; then
            echo "⚠️ Potential hardcoded secrets found"
          else
            echo "✅ No hardcoded secrets detected"
          fi

          # Check for eval usage
          if grep -r "eval(" src/ --include="*.ts" --include="*.js"; then
            echo "⚠️ eval() usage detected - potential security risk"
          else
            echo "✅ No eval() usage detected"
          fi

          # Check for dangerous functions
          if grep -r -E "(innerHTML|outerHTML|document\.write)" src/ --include="*.ts" --include="*.js"; then
            echo "⚠️ Potentially dangerous DOM manipulation detected"
          else
            echo "✅ No dangerous DOM manipulation detected"
          fi

          echo "🎯 Local security analysis completed"

  eslint-security:
    name: ESLint Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup

      - name: Install ESLint security plugins
        run: |
          pnpm add -D eslint-plugin-security eslint-plugin-no-secrets --save-dev || true

      - name: Run ESLint security analysis
        run: |
          # Create temporary ESLint config for security
          cat > .eslintrc.security.json << 'EOF'
          {
            "extends": [],
            "plugins": ["security"],
            "rules": {
              "security/detect-buffer-noassert": "error",
              "security/detect-child-process": "error",
              "security/detect-disable-mustache-escape": "error",
              "security/detect-eval-with-expression": "error",
              "security/detect-no-csrf-before-method-override": "error",
              "security/detect-non-literal-fs-filename": "error",
              "security/detect-non-literal-regexp": "error",
              "security/detect-non-literal-require": "error",
              "security/detect-object-injection": "error",
              "security/detect-possible-timing-attacks": "error",
              "security/detect-pseudoRandomBytes": "error",
              "security/detect-unsafe-regex": "error"
            }
          }
          EOF

          # Run security linting (allow to fail gracefully)
          npx eslint src/ -c .eslintrc.security.json --ext .ts,.js --format json > eslint-security.json || true

          # Parse results
          if [ -s eslint-security.json ]; then
            echo "📊 ESLint Security Analysis Results:"
            cat eslint-security.json | jq -r '.[] | select(.messages | length > 0) | .filePath + ": " + (.messages | length | tostring) + " issues"' || echo "No security issues found"
          else
            echo "✅ No ESLint security issues detected"
          fi

      - name: Upload security analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-security-${{ github.run_id }}
          path: eslint-security.json
          retention-days: 7
