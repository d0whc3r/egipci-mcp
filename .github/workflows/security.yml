name: Security & Dependencies

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: pnpm audit --json > audit-results.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.run_id }}
          path: audit-results.json
          retention-days: 30

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check if CodeQL is enabled
        id: codeql-check
        run: |
          # Check if code scanning is enabled by trying to access the API
          if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts" \
             | grep -q "Code scanning is not enabled"; then
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Code scanning is not enabled for this repository"
          else
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Code scanning is enabled"
          fi

      - name: Initialize CodeQL
        if: steps.codeql-check.outputs.enabled == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup

      - name: Build for analysis
        run: pnpm run build

      - name: Perform CodeQL Analysis (with upload)
        if: steps.codeql-check.outputs.enabled == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:typescript'

      - name: Perform CodeQL Analysis (local only)
        if: steps.codeql-check.outputs.enabled == 'false'
        run: |
          echo "üîç Running local security analysis..."

          # Run basic security checks
          echo "Checking for common security patterns..."

          # Check for hardcoded secrets
          if grep -r -i "password\|secret\|key\|token" src/ --include="*.ts" --include="*.js" | grep -v "// " | grep -v "test"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

          # Check for eval usage
          if grep -r "eval(" src/ --include="*.ts" --include="*.js"; then
            echo "‚ö†Ô∏è eval() usage detected - potential security risk"
          else
            echo "‚úÖ No eval() usage detected"
          fi

          # Check for dangerous functions
          if grep -r -E "(innerHTML|outerHTML|document\.write)" src/ --include="*.ts" --include="*.js"; then
            echo "‚ö†Ô∏è Potentially dangerous DOM manipulation detected"
          else
            echo "‚úÖ No dangerous DOM manipulation detected"
          fi

          echo "üéØ Local security analysis completed"

  oxlint-security:
    name: Oxlint Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup

      - name: Run oxlint security analysis
        run: |
          echo "üîç Running oxlint security analysis..."

          # Run oxlint with security-focused rules
          pnpm oxlint src/ --format=json > oxlint-security.json || true

          # Parse results
          if [ -s oxlint-security.json ]; then
            echo "üìä Oxlint Security Analysis Results:"
            cat oxlint-security.json | jq -r '.[] | select(.messages | length > 0) | .filePath + ": " + (.messages | length | tostring) + " issues"' 2>/dev/null || echo "Security analysis completed"
          else
            echo "‚úÖ No oxlint security issues detected"
          fi

          # Additional manual security checks
          echo "üîç Running additional security checks..."

          # Check for hardcoded secrets
          if grep -r -i "password\|secret\|key\|token" src/ --include="*.ts" --include="*.js" | grep -v "// " | grep -v "test" | grep -v "EGIPCI_COOKIE"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

          # Check for eval usage
          if grep -r "eval(" src/ --include="*.ts" --include="*.js"; then
            echo "‚ö†Ô∏è eval() usage detected - potential security risk"
          else
            echo "‚úÖ No eval() usage detected"
          fi

      - name: Upload security analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: oxlint-security-${{ github.run_id }}
          path: oxlint-security.json
          retention-days: 7
